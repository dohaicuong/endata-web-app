{"version":3,"sources":["serviceWorker.ts","providers/RelayProvider/environment.ts","providers/ThemeProvider/theme.ts","providers/RouteProvider/RouteErrorBoundary.tsx","providers/RouteProvider/RouteLoading.tsx","providers/RouteProvider/PrivateRoute.tsx","providers/RouteProvider/routes.ts","providers/RouteProvider/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","network","RelayNetworkLayer","urlMiddleware","url","req","Promise","resolve","noThrow","Environment","store","Store","RecordSource","theme","createMuiTheme","overrides","MuiCssBaseline","width","height","RouteErrorBoundary","error","componentStack","resetErrorBoundary","role","message","onClick","RouteLoading","PrivateRoute","Component","component","rest","token","localStorage","getItem","render","props","to","pathname","state","from","routes","exact","path","lazy","private","RouteProvider","FallbackComponent","Suspense","fallback","map","route","index","key","root","document","getElementById","ReactDOM","unstable_createRoot","environment","CssBaseline","ThemeProvider","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BCXAC,EAAU,IAAIC,oBAClB,CACEC,wBAAc,CACZC,IAAK,SAACC,GAAD,OAASC,QAAQC,QAAQ,0DAGlC,CAAEC,SAAS,IAGE,MAAIC,cAAY,CAC7BR,UACAS,MAAO,IAAIC,QAAM,IAAIC,kB,0BCJRC,EAZDC,YAAe,CAC3BC,UAAW,CACTC,eAAgB,CACd,UAAW,CACT,IAAK,CACH,kBAAmB,QAErB,uBAAwB,CAAEC,MAAO,EAAGC,OAAQ,Q,kCCIrCC,EAVqC,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,mBAC5E,OACE,yBAAKC,KAAK,SACR,oDACA,oCAAMH,QAAN,IAAMA,OAAN,EAAMA,EAAOI,SACb,6BAAMH,GACN,4BAAQI,QAASH,GAAjB,eCFSI,EALgB,WAC7B,OACE,mD,SCeWC,EAbmC,SAAC,GAAuC,IAA1BC,EAAyB,EAApCC,UAAyBC,EAAW,6BACjFC,EAAQC,aAAaC,QAAQ,gBAEnC,OACE,kBAAC,IAAD,iBACMH,EADN,CAEEI,OAAQ,SAAAC,GAAK,OAAIJ,EACb,kBAACH,EAAcO,GACf,kBAAC,IAAD,CAAUC,GAAI,CAAEC,SAAU,cAAeC,MAAO,CAAEC,KAAMJ,EAAMrC,kBCIzD0C,EAZiB,CAC9B,CAAEC,OAAO,EAAMC,KAAM,cAAeb,UAAWc,gBAAK,kBAAM,kCAC1D,CAAEF,OAAO,EAAMC,KAAM,cAAeb,UAAWc,gBAAK,kBAAM,mCAE1D,CAAEF,OAAO,EAAMG,SAAS,EAAMF,KAAM,aAAcb,UAAWc,gBAAK,kBAAM,kCACxE,CAAEF,OAAO,EAAMG,SAAS,EAAMF,KAAM,iBAAkBb,UAAWc,gBAAK,kBAAM,kCAC5E,CAAEF,OAAO,EAAMG,SAAS,EAAMF,KAAM,SAAUb,UAAWc,gBAAK,kBAAM,kCACpE,CAAEF,OAAO,EAAMG,SAAS,EAAMF,KAAM,UAAWb,UAAWc,gBAAK,kBAAM,kCACrE,CAAEF,OAAO,EAAMG,SAAS,EAAMF,KAAM,kBAAmBb,UAAWc,gBAAK,kBAAM,kCAE7E,CAAEF,OAAO,EAAMC,KAAM,IAAKb,UAAWc,gBAAK,kBAAM,mCCUnCE,EAhBO,WACpB,OACE,kBAAC,gBAAD,CAAeC,kBAAmB3B,GAChC,kBAAC,IAAD,KACE,kBAAC,IAAM4B,SAAP,CAAgBC,SAAU,kBAAC,EAAD,OACxB,kBAAC,IAAD,KACGR,EAAOS,KAAI,SAACC,EAAOC,GAClB,OAAID,EAAMN,QAAgB,kBAAC,EAAD,eAAcQ,IAAKD,GAAWD,IACjD,kBAAC,IAAD,eAAOE,IAAKD,GAAWD,YCJtCG,EAAOC,SAASC,eAAe,QACrCC,IAASC,oBAAoBJ,GAAMnB,OACjC,kBAAC,2BAAD,CAA0BwB,YAAaA,GACrC,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAe/C,MAAOA,GACpB,kBAAC,mBAAD,KACE,kBAAC,EAAD,URuHF,kBAAmBgD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/C,GACLgD,QAAQhD,MAAMA,EAAMI,c","file":"static/js/main.e2c28e58.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Environment, RecordSource, Store } from 'relay-runtime'\n\nimport {\n  RelayNetworkLayer,\n  urlMiddleware\n} from 'react-relay-network-modern'\n\nconst network = new RelayNetworkLayer(\n  [\n    urlMiddleware({\n      url: (req) => Promise.resolve('https://videotest.endataclaims.com/midgard/graphql'),\n    })\n  ],\n  { noThrow: true }\n)\n\nexport default new Environment({\n  network,\n  store: new Store(new RecordSource())\n})","import { createMuiTheme } from '@material-ui/core'\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiCssBaseline: {\n      '@global': {\n        '*': {\n          'scrollbar-width': 'thin',\n        },\n        '*::-webkit-scrollbar': { width: 4, height: 4 }\n      }\n    }\n  }\n})\nexport default theme","import React from 'react'\nimport { FallbackProps } from 'react-error-boundary'\n\nconst RouteErrorBoundary: React.FC<FallbackProps> = ({ error, componentStack, resetErrorBoundary }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong:</p>\n      <pre>{error?.message}</pre>\n      <pre>{componentStack}</pre>\n      <button onClick={resetErrorBoundary}>Try again</button>\n    </div>\n  )\n}\nexport default RouteErrorBoundary","import React from 'react'\n\nconst RouteLoading: React.FC = () => {\n  return (\n    <>Loading...</>\n  )\n}\nexport default RouteLoading","import React from 'react'\nimport { Redirect, Route, RouteProps } from 'react-router-dom'\n\ntype PrivateRouteProps = RouteProps & {\n  component?: any\n}\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({ component: Component, ...rest }) => {\n  const token = localStorage.getItem('ACCESS_TOKEN')\n\n  return (\n    <Route\n      {...rest}\n      render={props => token\n        ? <Component {...props} />\n        : <Redirect to={{ pathname: '/user/login', state: { from: props.location } }} />\n      }\n    />\n  )\n}\nexport default PrivateRoute","import { lazy } from 'react'\nimport { RouteProps } from 'react-router-dom'\n\nexport type AppRouteProps = RouteProps & {\n  private?: boolean\n}\nconst routes: AppRouteProps[] = [\n  { exact: true, path: '/user/login', component: lazy(() => import('pages/Login')) },\n  { exact: true, path: '/video-call', component: lazy(() => import('pages/VideoCall')) },\n\n  { exact: true, private: true, path: '/dashboard', component: lazy(() => import('pages/Dashboard')) },\n  { exact: true, private: true, path: '/communication', component: lazy(() => import('pages/Communication')) },\n  { exact: true, private: true, path: '/media', component: lazy(() => import('pages/Media')) },\n  { exact: true, private: true, path: '/claims', component: lazy(() => import('pages/Claims')) },\n  { exact: true, private: true, path: '/claim/:claimId', component: lazy(() => import('pages/Claim')) },\n\n  { exact: true, path: '*', component: lazy(() => import('pages/NotFound')) },\n]\nexport default routes","import React from 'react'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport { ErrorBoundary } from 'react-error-boundary'\nimport RouteErrorBoundary from './RouteErrorBoundary'\nimport RouteLoading from './RouteLoading'\nimport PrivateRoute from './PrivateRoute'\n\nimport routes from './routes'\n\nconst RouteProvider = () => {\n  return (\n    <ErrorBoundary FallbackComponent={RouteErrorBoundary}>\n      <Router>\n        <React.Suspense fallback={<RouteLoading />}>\n          <Switch>\n            {routes.map((route, index) => {\n              if (route.private) return <PrivateRoute key={index} {...route} />\n              return <Route key={index} {...route} />\n            })}\n          </Switch>\n        </React.Suspense>\n      </Router>\n    </ErrorBoundary >\n  )\n}\nexport default RouteProvider","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from 'serviceWorker'\n\nimport { RelayEnvironmentProvider } from 'react-relay/hooks'\nimport environment from 'providers/RelayProvider/environment'\n\nimport { ThemeProvider, CssBaseline } from '@material-ui/core'\nimport theme from './providers/ThemeProvider/theme'\n\nimport { SnackbarProvider } from 'notistack'\n\nimport RouteProvider from 'providers/RouteProvider'\n\nconst root = document.getElementById('root') as HTMLElement\nReactDOM.unstable_createRoot(root).render(\n  <RelayEnvironmentProvider environment={environment}>\n    <CssBaseline />\n    <ThemeProvider theme={theme}>\n      <SnackbarProvider>\n        <RouteProvider />\n      </SnackbarProvider>\n    </ThemeProvider>\n  </RelayEnvironmentProvider>\n)\n\nserviceWorker.unregister()"],"sourceRoot":""}